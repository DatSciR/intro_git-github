---
title: "Introducci√≥n a Git y GitHub para el trabajo colaborativo"
subtitle: "I Jornadas de Ecoinform√°tica de la AEET"
author: Julen Astigarraga and Ver√≥nica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "√çndice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
bibliography: references_git.bib
---

![](images/quien.png)

## Introducci√≥n

Git (<https://git-scm.com/>) y GitHub ([https://github.com/](#0){.uri}) est√°n ganando cada vez m√°s importancia en diversos campos de estudio a medida que el volumen de datos aumenta y los an√°lisis se hacen m√°s complejos. Aprenderemos c√≥mo Git puede usarse para controlar la trazabilidad de los cambios realizados en proyectos o archivos y veremos c√≥mo este control de versiones es especialmente √∫til en proyectos colaborativos mediante el uso de un servidor de alojamiento en l√≠nea como GitHub.

Aunque existen multitud de manuales disponibles gratuitamente sobre c√≥mo utilizar Git y GitHub, estas herramientas son complejas. El prop√≥sito original de Git era ayudar a grupos de desarrolladores inform√°ticos a trabajar en colaboraci√≥n en grandes proyectos de software, por lo que puede resultar enrevesado, hay m√∫ltiples soluciones para el mismo problema y tiene una curva de aprendizaje pronunciada. Sin embargo, Git y GitHub nos pueden ayudar a solucionar algunos problemas comunes derivados de la creaci√≥n de diferentes versiones que pueden ser un poco molestos:

\- Sobreescritura de un archivo

\- Versiones finales infinitas

![](images/FINALdoc.png)

\- Trabajo por error en una versi√≥n que no era la final

\- Creaci√≥n de copias "en conflicto" cuando dos personas trabajan a la vez

\- Ediciones sin control de cambios

![Ediciones sin control de cambios](images/tracker.png)

### Qu√© es Git

Git es un sistema avanzado de control de versiones (como el "control de cambios" de Microsoft Word) distribuido [@blischak2016; @ram2013]. Git permite "rastrear" el progreso de un proyecto a lo largo del tiempo ya que hace "capturas" del mismo a medida que evoluciona y los cambios se van registrando. Este sistema permite ver qu√© cambios se hicieron, qui√©n los hizo y por qu√©, e incluso volver a versiones anteriores. Adem√°s, Git facilita el trabajo en paralelo de varios participantes. Mientras que en otros sistemas de control de versiones (p. ej. Subversion (SVN, <https://subversion.apache.org/>) o Concurrent Versions System (CVS, <http://cvs.nongnu.org/>)) hay un servidor central y cualquier cambio hecho por un usuario se sincroniza con este servidor y de ah√≠ con el resto de usuarios, Git es un control de versiones distribuido que permite a todos los usuarios trabajar en el proyecto paralelamente e ir haciendo "capturas" del trabajo de cada uno para luego unirlos. Otras alternativas de control de versiones distribuido comparables a Git son Mercurial (<https://www.mercurial-scm.org/>) o Bazaar (<https://bazaar.canonical.com/>), pero Git es con diferencia el m√°s utilizado.

![Ejemplo de un proyecto rastreado por Git con indicaciones de c√≥mo se registran los cambios y la evoluci√≥n del proyecto, el autor o autora de los cambios (¬øqui√©n?), el momento en que se han registrado (¬øcu√°ndo?), en qu√© documentos o l√≠neas se han producido cambios (¬ød√≥nde?) y qu√© ha cambiado (¬øqu√©?)](images/git.jpg)

### Qu√© es GitHub

GitHub es un servidor de alojamiento en l√≠nea o repositorio remoto para albergar proyectos basados en Git que permite la colaboraci√≥n entre diferentes usuarios o con uno mismo [@galeano2018; @perez-riverol2016]. Un repositorio es un directorio donde desarrollar un proyecto que contiene todos los archivos necesarios para el mismo. Aunque existen distintos repositorios remotos (p. ej. GitLab, <https://gitlab.com/>, o Bitbucket, <https://bitbucket.org/>) con funcionalidad similar, GitHub es hoy en d√≠a el m√°s utilizado. GitHub registra el desarrollo de los proyectos de manera remota, permite compartir proyectos entre distintos usuarios y proporciona la seguridad de la nube entre otras funciones. Cuando se trabaja en proyectos colaborativos, la base de la interacci√≥n entre Git y GitHub es que todos los colaboradores de un proyecto est√°n de acuerdo en que GitHub contiene la copia principal del proyecto, es decir, GitHub contiene la copia centralizada del control de versiones distribuido o descentralizado.

![P√°gina inicial de GitHub](images/github_pag_ini.JPG)

![Interacci√≥n entre Git y GitHub. Git, al ser un control de versiones distribuido, permite que todos los usuarios trabajen paralelamente sin interferir en el trabajo de los dem√°s. Luego cada usuario sincroniza su trabajo con la copia principal del proyecto ubicado en GitHub](images/conexiones.jpg){fig-align="center"}

## Instalaci√≥n

En este punto es necesario que tengas instalada la versi√≥n m√°s reciente de R (<https://cloud.r-project.org/>), RStudio (<https://posit.co/download/rstudio-desktop/>), Git (<https://happygitwithr.com/install-git.html>) y una cuenta en GitHub (<https://github.com/>) creada.

### Ejercicio

1.  En el *shell*, pres√©ntate a Git ([Chapter 7: Git-Intro](https://happygitwithr.com/hello-git.html))

    *Tools* -\> *Terminal*

    `git config --global user.name 'Nombre Apellido'`

    `git config --global user.email 'nombre@ejemplo.com'`

    üí°**Este debe ser el correo electr√≥nico asociado a tu cuenta de GitHub**

    ```{r config}
    #|eval: false

    # Tambi√©n puedes hacerlo utilizando el paquete usethis
    # install.packages("usethis")
    # library(usethis)
    # use_git_config(user.name = "Monchi", user.email = "monchi@example.org")
    ```

![Terminal](images/terminal.png)\

2.  Compueba que has instalado Git correctamente:

    `git --version`

    Para ver el usuario utilizado para configurar Git:

    `git config user.name`

    Para ver a qu√© cuenta de correo est√° asociado Git:

    `git config user.email`

    Para ver tanto el usuario como el correo asociado:

    `git config --global --list`

Para la resoluci√≥n de problemas durante la instalaci√≥n recomendamos mirar aqu√≠: <https://happygitwithr.com/troubleshooting.html>

3.  Genera un PAT (*Personal Access Token*) para HTTPS

    Git puede comunicarse con un servidor remoto utilizando uno de los dos protocolos: HTTPS o SSH. Nosotros utilizaremos HTTPS con *personal access token* (PAT, <https://happygitwithr.com/https-pat.html>).

```{r token}
#|eval: false

# install.packages("usethis")
# install.packages("gitcreds")
# library(usethis)
# library(gitcreds)
# create_github_token() # generar un token
# gitcreds_set() # acceder al Git credential store
```

üí°Conviene describir el prop√≥sito del token en el campo *Note*, porque se pueden tener varios PATs. No podr√°s volver a ver este token, as√≠ que no cierres ni salgas de la ventana del navegador hasta que almacenes el PAT localmente. ¬°Trata este PAT como una contrase√±a!

## Repositorios y proyectos

Un repositorio es como un "contenedor" donde desarrollar un proyecto.

Para crear un repositorio en GitHub damos a "*+ New repository*". Aqu√≠ se indica el nombre, una peque√±a descripci√≥n, y si quieres que sea p√∫blico o privado. Se recomienda iniciar el repositorio con un archivo "README" (*Initialize this repository with a README*) para recoger cualquier informaci√≥n esencial para el uso del repositorio (estructura, descripci√≥n m√°s detallada del contenido, etc.).

En RStudio, creamos un nuevo proyecto y lo conectamos al repositorio: File \> New project \> Version control \> Git \> copiar el URL del repositorio que hemos creado de GitHub (est√° en la p√°gina principal de nuestro repositorio, en "*clone or download*"). Seleccionamos el directorio local donde queremos guardar el proyecto y pulsamos en "*Create project*".

Si vamos al directorio local seleccionado, encontraremos la carpeta conectada a Git y GitHub que hemos creado en nuestro ordenador. Podemos copiar aqu√≠ todos los archivos que nos interesan para el proyecto (datos, im√°genes, etc).

üí°Para m√°s informaci√≥n sobre c√≥mo clonar el repositorio en GitHub (repositorio remoto) en nuestro ordenador (repositorio local) ver <https://happygitwithr.com/rstudio-git-github.html> para hacerlo desde RStudio y @galeano2018 para hacerlo mediante la l√≠nea de comandos.

üí°En caso de querer conectar un antiguo proyecto de RStudio a Git y GitHub, puedes seguir los pasos que se describen aqu√≠: <https://happygitwithr.com/existing-github-first.html>.

### Estructura del repositorio de GitHub

En la p√°gina principal del repositorio en GitHub podemos encontrar las siguientes pesta√±as:

-   **Code**: contenido del proyecto

-   **Issues**: foro del proyecto para comentar fallos, tareas pendientes, hacer peticiones a los desarrolladores, preguntar dudas, etc. Se pueden asignar tareas o preguntas a los miembros del proyecto escribiendo "\@" antes del nombre del colaborador. Una vez resuelto, el issue se cierra (*Close issue*).

-   **Pull requests**: veremos m√°s adelante para qu√© sirve.

-   **Actions**: son peque√±as aplicaciones que realizan alguna acci√≥n cada vez que se sube un commit (p. ej. tests).

-   **Projects**: es como una hoja de c√°lculo con tareas, encargados, deadlines, status, etc. que se integra con las incidencias y solicitudes de incorporaci√≥n de cambios para ayudar a planificar las tareas y realizar el seguimiento del trabajo.

-   **Wiki**: es un espacio para documentar el proyecto (hoja de ruta, estado, documentaci√≥n detallada...).

-   **Security**: opciones de seguridad.

-   **Insights**: estad√≠sticas del proyecto.

-   **Settings**

![Repositorio en GitHub destacando algunas pesta√±as importantes](images/github_repositorio.JPG)

#### Ejercicio

1.  Crea un repositorio en GitHub y con√©ctalo a un nuevo proyecto de RStudio (esto generar√° un repositorio (carpeta) en tu ordenador en la ubicaci√≥n que hayas especificado). Incluir un archivo "*.gitignore"*

2.  Crea un nuevo script de R en el directorio de trabajo (es decir, crea un script de R y gu√°rdalo dentro del repositorio que has creado)

3.  En RStudio ve a la pesta√±a Git para ver todos los documentos que han sido identificados por Git

Una vez finalizada la instalaci√≥n podr√°s ver la pesta√±a de Git en RStudio.

![Git en RStudio](images/RStudio.JPG)

### Git ignore

Al crear un repositorio se recomienda crear un archivo "*.gitignore*". Este archivo contendr√° los nombres o extensiones de los archivos del proyecto que por defecto no queremos compartir aunque est√©n en el repositorio local (p. ej., el archivo "*.Rhistory*" que RStudio crea por defecto). Es una buena pr√°ctica ignorar archivos que no sean √∫tiles para el resto de colaboradores as√≠ como archivos muy pesados (p. ej., una base de datos resultado de correr un script) para no subirlos y descargarlos continuamente de GitHub. Para a√±adir archivos al *gitignore* se puede utilizar el bot√≥n derecho del rat√≥n sobre el archivo en la pesta√±a Git de RStudio pero tambi√©n se puede a√±adir el nombre del archivo que desamos ignorar en el archivo "*.gitignore*" manualmente.

### GitHub: la red social

GitHub no es s√≥lo un repositorio remoto donde almacenar diferentes versiones de tu trabajo o desarrollar proyectos colaborativos, si no que tambi√©n es una red de encuentro para programadores. Como en otras redes puedes cotillear perfiles, seguir a ciertas personas, tener seguidores, guardar proyectos que te gustan‚Ä¶

Con el buscador (üîç) puedes buscar aquellos contenidos que te interesan. La b√∫squeda est√° organizada por categor√≠as (*Repositories, Commits, Issues, Users*‚Ä¶) lo que facilita encontrar lo que buscas. Para seguir a un usuario tienes la opci√≥n *Follow*. Pulsando *Star*‚≠ê puedes guardar un enlace a cualquier repositorio en tu cuenta de GitHub y con *Fork* estar√≠as guardando una copia con la que puedes interaccionar. Con *Watch*üëÅÔ∏è puedes hacer un seguimiento de un repositorio. *Download* te permite guardar una copia de cualquier repositorio p√∫blico en tu ordenador.

## Flujo de trabajo en Git y GitHub

Git es capaz de rastrear todos los archivos contenidos en un repositorio. Para comprender c√≥mo Git registra los cambios y c√≥mo podemos compartir dichos cambios con nuestros colaboradores es importante entender c√≥mo se estructura Git y c√≥mo se sincroniza con GitHub. Hay cuatro "zonas" de trabajo:

1.  **Directorio de trabajo (*working directory*):** es donde se est√° trabajando. Esta zona se sincroniza con los archivos locales del ordenador.

2.  **√Årea de preparaci√≥n (*staging area* o *Index*):** es la zona intermedia entre el directorio de trabajo y el repositorio local de Git. Es la zona de borradores. El usuario debe seleccionar los archivos que se van a registrar en la siguiente "captura" de Git.

3.  **Repositorio local (*local repository* o *HEAD*):** es donde se registran todos los cambios capturados por Git en tu ordenador.

4.  **Repositorio remoto (*remote repository*):** es donde se registran todos los cambios capturados por Git en la nube (GitHub).

![Representaci√≥n gr√°fica de las diferentes zonas de trabajo en Git y GitHub: directorio de trabajo, √°rea de preparaci√≥n o Index, repositorio local o HEAD, y repositorio remoto. Imagen de fondo de Philip Brookes (https://creativecommons.org/licenses/by-nc-nd/2.0/legalcode)](images/arboles.jpg){fig-align="center" width="569"}

### ¬øC√≥mo moverse de una zona a otra?

Se puede hacer mediante l√≠nea de comandos en la terminal y tambi√©n mediante la pesta√±a integrada en RStudio, pero el proceso es el mismo.

Al principio todos los cambios realizados aparecen en amarillo porque Git no sabe que hacer con ellos. Estamos en el directorio de trabajo y puede que no nos interese guardar todos los cambios para el futuro.

Para a√±adir un cambio del directorio de trabajo al √°rea de preparaci√≥n hay que utilizar `git add` (en la pesta√±a Git de RStudio se hace seleccionando el archivo). Este comando indica a Git que se quieren incluir las actualizaciones de alg√∫n archivo en la pr√≥xima "captura" del proyecto y que Git las registre. Sin embargo, `git add` no afecta al repositorio local.

Para registrar los cambios que nos interesen hay que utilizar `git commit` (en la pesta√±a Git de RStudio se hace clickando el bot√≥n "*Commit*"). Al ejecutar `git commit` se hace una "captura" del estado del proyecto. Junto con el *commit* se a√±ade un mensaje con una peque√±a explicaci√≥n de los cambios realizados y por qu√© (p. ej. "incluyo las referencias formateadas"). Cada `git commit` tiene un SHA (*Secure Hash Algorithm*) que es un c√≥digo alfanum√©rico que identifica inequ√≠vocamente ese *commit* (p. ej. 1d21fc3c33cxxc4aeb7823400b9c7c6bc2802be1). Con el SHA siempre se pueden ver los cambios que se hicieron en ese *commit* y volver a esa versi√≥n f√°cilmente.

Por √∫ltimo, `git push` permite subir los cambios que hemos hecho a GitHub y quedar√°n visibles para nuestros colaboradores (en la pesta√±a Git de RStudio se hace clickando el bot√≥n "*Push*"). B√°sicamente, `git commit` registra los cambios en el repositorio local y `git push` actualiza el repositorio remoto con los cambios y archivos asociados.

Cuando se retoma un proyecto tras horas, d√≠as o incluso meses, con `git pull` se descargan todas las actualizaciones que haya en GitHub (nuestras o de nuestros colaboradores), que se fusionar√°n (*merge*) con el √∫ltimo *commit* en nuestro repositorio local (en la pesta√±a Git de RStudio se hace clickando el bot√≥n "*Pull*").

![Flujo de trabajo en Git y GitHub mostrando las diferentes zonas de trabajo y los comandos utilizados para la transici√≥n de una zona de trabajo a otra.](images/workflow_git_github.jpg)

![Opciones de Git en RStudio](images/git_RStudio.png){fig-align="center" width="486"}

![Commit en RStudio](images/commit_RStudio.png){fig-align="center" width="545"}

Adem√°s, en la pesta√±a Git de RStudio podemos observar el bot√≥n "*Diff*" que muestra los cambios que se han hecho a cada archivo desde el √∫ltimo commit y las ramas (que lo explicaremos m√°s abajo). Clickando con el bot√≥n derecho del rat√≥n podemos abrir los archivos que han sido modificados mediante "*Open file*" y con el bot√≥n "*Revert*" volvemos al estado del √∫ltimo commit (‚ö†Ô∏ècuidado con esto porque te borrar√° los cambios realizados en tu directorio de trabajo).

#### Ejercicio

En el proyecto generado en el ejercicio anterior, guardad y subid los cambios realizados a GitHub (`git add` + `git commit` + `git push`)

üí°`git status`: muestra la rama en la que estamos y los cambios hechos y a√±adidos desde el √∫ltimo commit.

üí°Usar `git commit` es para el proyecto como usar anclajes cuando estamos escalando una pared de roca. Desarrollar un script sin commits es como escalar sin asegurarse: puedes avanzar mucho m√°s r√°pido a corto plazo, pero a largo plazo las probabilidades de fallo catastr√≥fico son altas. Por otro lado, hacer muchos commits va a ralentizar tu progreso. Lo mejor: usar m√°s commits cuando est√°s en un territorio incierto o peligroso.

![Lineas de trabajo (cuerdas) aseguradas con varios commits (anclajes)](images/climbing.png)

En el repositorio remoto de GitHub, en la pesta√±a *Code* podemos observar el contenido de nuestro proyecto, incluyendo cada *commit* realizado:

![Repositorio en GitHub destacando informaci√≥n importante](images/github_repositorio2.JPG)

### Navegar por el historial

El historial de un repositorio (*üïòXX commits*) contiene una lista de enlaces a todos los commits que se han realizado en cualquiera de las ramas. Dentro de cada *commit* se pueden ver los archivos a√±adidos o borrados en esa "captura" y las l√≠neas de c√≥digo a√±adidas (en verde) o borradas (en rojo) en cada archivo modificado. Adem√°s, en el historial, se pueden a√±adir comentarios en l√≠neas concretas de c√≥digo o comentarios generales al *commit* entero.

En GitHub tambi√©n se puede acceder a la historia de commits de cada archivo en concreto (*History*) y al autor de cada parte del c√≥digo (*Blame*).

El historial del proyecto y de los archivos tambi√©n es accesible a trav√©s de RStudio (üïí).

üí°M√°s informaci√≥n sobre como navegar en el pasado del proyecto aqu√≠: <https://happygitwithr.com/time-travel-see-past.html>

![Historial de un repositorio](images/hist.jpg)

üí°En los *issues* se puede referenciar a una l√≠nea concreta de c√≥digo de un estado concreto del proyecto entrando en el archivo en la pesta√±a *Code* y clickando en el n√∫mero de l√≠nea que se quiere comentar, o a un *commit* entero copiando el SHA.

üí°Si quiero volver atr√°s en el tiempo o si hago un cambio que no quiero ¬øc√≥mo lo puedo resolver? Hay m√∫ltiples opciones pero [aqu√≠](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia3_comandos.md) (en la secci√≥n de "La he liado ¬øc√≥mo deshago los cambios?") detallamos tres: *restore*, *reset* y *revert*.

## Trabajo colaborativo

Aunque Git y GitHub facilitan el control de versiones de nuestros proyectos individuales, su m√°xima potencialidad se despliega al trabajar en equipo ya que facilitan el seguimiento del trabajo de todos los colaboradores y la integraci√≥n ordenada de cada parte en un producto final.

Para dar acceso de edici√≥n a tus colaboradores, en la p√°gina principal de nuestro proyecto en GitHub entramos en "*Settings -\> Access -\> Collaborators -\> Manage Access -\> Add people*". Los colaboradores pueden crear su copia local del proyecto de control de versiones clonando el repositorio remoto.

#### Ejercicio

En equipos de 2 o 3 personas:

1.  El due√±o del repositorio invita al resto de integrantes del equipo a su proyecto
2.  Los colaboradores clonan el repositorio al que han sido invitados a su directorio de trabajo

### Ramificaci√≥n

Git permite crear una "rama" (*branch*) paralela al proyecto si se desea seguir una l√≠nea independiente de trabajo, bien por ser diferente de la principal (p. ej. probar un nuevo an√°lisis) o bien para desarrollar espec√≠ficamente una parte del proyecto (p. ej. trabajar s√≥lo en la escritura de los m√©todos de un art√≠culo mientras otros colaboradores trabajan en otras secciones). Las ramas permiten trabajar en el proyecto sin interferir con lo que est√°n haciendo los compa√±eros. En Git, una rama es un *commit* al que le se le da un nombre y que contiene un "enlace" (puntero o *pointer*) a un SHA espec√≠fico que es el origen de la rama. La rama *main* es la rama por defecto cuando se crea un repositorio y a partir de ella se suelen crear las dem√°s.

Las ramas se pueden generar en la [terminal](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia2_colaboracion.md) y en la pesta√±a Git de RStudio. En la pesta√±a Git se generan mediante el bot√≥n "*New Branch*". Al lado de "*New Branch"* podemos observar todas las ramas que contiene el repositorio y nos permite cambiar de rama f√°cilmente clickando en ellas.

![Proceso de creaci√≥n de la rama PPP y la rama monchi](images/ramas.png){fig-align="center"}

#### Ejercicio

1.  Un integrante del equipo crea una rama en el proyecto en el que colabora

2.  Modifica la primera frase del archivo README.txt y sube los cambios al repositorio remoto

3.  Vuelve a la rama main y comprueba el archivo README.txt

![](images/github_code.png){fig-align="center" width="543"}

### ¬øC√≥mo se unen distintas ramas?

Cuando el trabajo desarrollado en una rama se da por finalizado hay que hacer la uni√≥n a la rama principal ("*main*"). Esto se puede hacer en la [terminal](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia2_colaboracion.md) y con el bot√≥n "*pull request*" en la p√°gina del proyecto en GitHub siguiendo los pasos que se explican a continuaci√≥n.

![Proceso de creaci√≥n y uni√≥n de ramas. Ejemplo de uni√≥n (merge) de la rama monchi a la rama main](images/merge.jpg)

Una vez que hemos realizado los cambios que quer√≠amos en la rama y est√°n subidos a GitHub (`git add` + `git commit` + `git push`), en GitHub aparece la opci√≥n de "Compare & pull request". Aqu√≠ se genera el *pull request* ("*Create pull request*") a√±adiendo un mensaje para saber lo que se est√° uniendo. GitHub os indicar√° si existen conflictos o no. Si no existen conflictos, podr√©is realizar el *pull request* sin problema y, si existen conflictos, hay que resolverlos manualmente.

![](images/pullrequest1.jpg){fig-align="center"}

![](images/pullrequest1.1.jpg)

![Caracter√≠sticas del merge a realizar](images/pullrequest2.jpg){fig-align="center"}

![](images/pullrequest3.jpg){fig-align="center"}

![Confirmacion y fin del proceso](images/pullrequest3.1.jpg){fig-align="center"}

### Resoluci√≥n de conflictos

Git puede encontrar conflictos al fusionar ramas que hay que arreglar manualmente (GitHub os indicar√° "Can't automatically merge"). Esto ocurrir√° si en las dos ramas se han cambiado las mismas l√≠neas de un archivo. Hay que generar el pull request y "*Resolve conflicts*".

![Aparici√≥n de conflictos](images/cant_merge.png)

![Resoluci√≥n de conflictos](images/cant_merge2.png)

Git muestra d√≥nde est√°n los conflictos as√≠:

`<<<<<<c√≥digo del main=======c√≥digo de la rama a unir>>>>>>`

![](images/cant_merge3.png)

Para solucionarlo hay que escoger los cambios de la rama principal o de la rama a unir seg√∫n corresponda. Una vez solucionados, Git permite completar el *merge* (es decir, un nuevo *commit* que contendr√° las ramas fusionadas). La mejor manera de evitar conflictos o por lo menos reducir su dificultad es realizar cambios peque√±os y sincronizar frecuentemente con GitHub, y tener una comunicaci√≥n fluida con los colaboradores.

#### Ejercicio

1.  Un integrante del equipo modifica tambi√©n la primera frase del archivo README.txt en la rama main y sube los cambios al repositorio remoto. Esta frase hab√≠a sido previamente modificada en una rama en el ejercicio anterior.
2.  Un integrante del equipo combina la rama del ejercicio anterior con la rama principal (*main*) del proyecto.
3.  Resolved el conflicto (es decir, quedaos con los cambios que sirvan y subid los cambios al repositorio remoto).

üí°[Aqu√≠](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia3_comandos.md) (en la secci√≥n de "Otros comandos √∫tiles") pod√©is ver c√≥mo borrar ramas y otros comandos √∫tiles

![](images/in_case_of_fire.png){fig-align="center" width="333"}

## Enlaces de inter√©s

**Ciencia reproducible**

-   [Ciencia reproducible: qu√©, por qu√©, c√≥mo](https://github.com/ecoinfAEET/Reproducibilidad)

**Control de versiones (Git)**

-   [Manual de referencia de Git](https://git-scm.com/docs)

-   [Software Carpentry](http://swcarpentry.github.io/git-novice/)

-   [Atlassian Bitbucket](https://www.atlassian.com/git/tutorials)

-   [Oh Shit, Git!?!](https://ohshitgit.com/)

-   [git - la gu√≠a sencilla](https://rogerdudler.github.io/git-guide/index.es.html)

-   [Pro Git](https://git-scm.com/book/es/v2)

**Integrar Git, GitHub y RStudio**

-   [Happy Git and GitHub for the useR](https://happygitwithr.com/)

-   [¬°Se puede entender c√≥mo funcionan Git y GitHub!](https://www.revistaecosistemas.net/index.php/ecosistemas/article/view/2332)

-   [Ciencia reproducible y colaborativa con R, Git y GitHub (DatSciR)](https://github.com/DatSciR/intro_git-github)

**Ense√±ar y aprender con GitHub**

-   [GitHub Education para profesores e investigadores](https://docs.github.com/en/education/explore-the-benefits-of-teaching-and-learning-with-github-education/use-github-in-your-classroom-and-research/about-github-education-for-educators-and-researchers)

------------------------------------------------------------------------

::: {#refs}
:::

------------------------------------------------------------------------

![](images/Logo_ecoinf_10.jpg)

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
