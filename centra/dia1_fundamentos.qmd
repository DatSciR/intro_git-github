---
title: "Fundamentos de Git y GitHub y su aplicaci√≥n en proyectos colaborativos y reproducibles en R y RStudio"
author:
  - name: Julen Astigarraga
    affiliations:
      - Universidad de Alcal√°, Forest Ecology and Restoration Group
  - name: Ver√≥nica Cruz-Alonso
    affiliations:
      - Graduate School of Design, Harvard University
date: "`r Sys.Date()`"
format: 
  html: 
    toc: true
    toc-depth: 3
  gfm: default
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

# Introducci√≥n

El principal objetivo de este documento es dar a conocer la estructura, funcionalidad y potencialidad de Git (<https://git-scm.com/>), as√≠ como su interacci√≥n con GitHub (<https://github.com/>), para el trabajo en proyectos colaborativos y reproducibles. Ambas herramientas est√°n ganando cada vez m√°s importancia en diversos campos de estudio a medida que el volumen de datos aumenta y los an√°lisis se hacen m√°s complejos. Aprenderemos c√≥mo Git puede usarse para controlar la trazabilidad de los cambios realizados en proyectos o archivos y veremos c√≥mo este control de versiones es especialmente √∫til en proyectos colaborativos mediante el uso de un servidor de alojamiento en l√≠nea como GitHub. Aunque existen multitud de manuales disponibles gratuitamente sobre c√≥mo utilizar Git y GitHub, estas herramientas son complejas y tienen una curva de aprendizaje pronunciada. Por ello, aqu√≠ hemos intentado agrupar nuestra experiencia adquirida despu√©s de varios a√±os trabajando con estas herramientas para facilitar vuestra curva de aprendizaje ¬°Vamos a por ello!

Por ejemplo, Git y GitHub nos pueden ayudar a solucionar algunos problemas comunes derivados de la creaci√≥n de diferentes versiones que pueden ser un poco molestos:

\- Sobreescritura de un archivo

\- Versiones finales infinitas

!["FINAL.doc"](images/FINALdoc.png)\

\- Trabajo por error en una versi√≥n que no era la final

\- Creaci√≥n de copias "en conflicto" cuando dos personas trabajan a la vez

\- Ediciones sin control de cambios

![Ediciones sin control de cambios](images/tracker.png)\

## [Qu√© es Git](https://git-scm.com/)

Git es un sistema avanzado de control de versiones (como el "control de cambios" de Microsoft Word) distribuido [@blischak2016; @ram2013]. Git permite "rastrear" el progreso de un proyecto a lo largo del tiempo ya que hace "capturas" del mismo a medida que evoluciona y los cambios se van registrando. Esto permite ver qu√© cambios se hicieron, qui√©n los hizo y por qu√©, e incluso volver a versiones anteriores. Adem√°s, Git facilita el trabajo en paralelo de varios participantes. Mientras que en otros sistemas de control de versiones (p. ej. Subversion (SVN, <https://subversion.apache.org/>) o Concurrent Versions System (CVS, <http://cvs.nongnu.org/>)) hay un servidor central y cualquier cambio hecho por un usuario se sincroniza con este servidor y de ah√≠ con el resto de usuarios, Git es un control de versiones distribuido que permite a todos los usuarios trabajar en el proyecto paralelamente e ir haciendo "capturas" del trabajo de cada uno para luego unirlos. Otras alternativas de control de versiones distribuido comparables a Git son Mercurial (<https://www.mercurial-scm.org/>) o Bazaar (<https://bazaar.canonical.com/>), pero Git es con diferencia el m√°s utilizado.

Git surge en 2005, tras la ruptura de la relaci√≥n entre la comunidad que estaba desarrollando Linux y la empresa comercial que desarrollaba BitKeeper (DVCS). En ese momento BitKeeper dej√≥ de ser gratuita y esto llev√≥ a la comunidad de desarrolladores de Linux (y en particular a Linus Torvalds, el creador de Linux) a desarrollar su propia herramienta para el control de versiones bas√°ndose en su experiencia al utilizar BitKeeper. Algunos de los objetivos del nuevo sistema eran velocidad, dise√±o sencillo, gran soporte para el desarrollo no lineal (ramas), sistema distribuido y capacidad para manejar grandes bases de datos. Por tanto, el prop√≥sito original de Git era ayudar a grupos de desarrolladores inform√°ticos a trabajar en colaboraci√≥n en grandes proyectos de software. En este sentido, veremos que hay m√∫ltiples soluciones para un mismo problema y que la curva de aprendizaje para no desarrolladores puede ser pronunciada.

![Ejemplo de un proyecto rastreado por Git con indicaciones de c√≥mo se registran los cambios y la evoluci√≥n del proyecto, el autor o autora de los cambios (¬øqui√©n?), el momento en que se han registrado (¬øcu√°ndo?), en qu√© documentos o l√≠neas se han producido cambios (¬ød√≥nde?) y qu√© ha cambiado (¬øqu√©?)](images/git.jpg)

## [Qu√© es GitHub](https://github.com/)

GitHub es un servidor de alojamiento en l√≠nea o repositorio remoto para albergar proyectos basados en Git que permite la colaboraci√≥n entre diferentes usuarios o con uno mismo [@galeano2018; @perez-riverol2016]. Un repositorio es un directorio donde desarrollar un proyecto que contiene todos los archivos necesarios para el mismo. Aunque existen distintos repositorios remotos (p. ej. GitLab, <https://gitlab.com/>, o Bitbucket, <https://bitbucket.org/>) con funcionalidad similar, GitHub es hoy en d√≠a el m√°s utilizado. GitHub registra el desarrollo de los proyectos de manera remota, permite compartir proyectos entre distintos usuarios y proporciona la seguridad de la nube entre otras funciones. Cuando se trabaja en proyectos colaborativos, la base de la interacci√≥n entre Git y GitHub es que todos los colaboradores de un proyecto est√°n de acuerdo en que GitHub contiene la copia principal del proyecto, es decir, GitHub contiene la copia centralizada del control de versiones distribuido o descentralizado.

![P√°gina inicial de GitHub](images/github_pag_ini.JPG)

![Interacci√≥n entre Git y GitHub. Git, al ser un control de versiones distribuido, permite que todos los usuarios trabajen paralelamente sin interferir en el trabajo de los dem√°s. Luego cada usuario sincroniza su trabajo con la copia principal del proyecto ubicado en GitHub](images/conexiones.jpg)

# Instalaci√≥n

En este punto es necesario que tengas instalada la versi√≥n m√°s reciente de R (<https://cloud.r-project.org/>), RStudio (<https://www.rstudio.com/products/rstudio/download/>), Git (<https://happygitwithr.com/install-git.html>) y una cuenta en GitHub (<https://github.com/>) creada.

### üìù**Ejercicio 1.1**

1.  En el *shell*, pres√©ntate a Git ([Chapter 7: Git-Intro](https://happygitwithr.com/hello-git.html))

    *Tools* -\> *Shell*

    `git config --global user.name 'Nombre Apellido'`

    `git config --global user.email 'nombre@ejemplo.com'`

    üëÄ **Este debe ser el correo electr√≥nico asociado a tu cuenta de GitHub**

    ```{r config, eval = F}
    # install.packages("usethis")
    # library(usethis)
    # use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")
    ```

‚ö°¬øQu√© es el *shell*? El *shell* (o terminal) es un programa en tu ordenador cuyo trabajo es ejecutar otros programas (ver <https://happygitwithr.com/shell.html#shell>). En este curso aprenderemos a trabajar principalmente desde la l√≠nea de comandos del *shell* aunque tambi√©n veremos c√≥mo hacerlo a trav√©s de un cliente como RStudio (<https://www.rstudio.com/>), recomendable para usuarios noveles de Git (ver <https://happygitwithr.com/rstudio-git-github.html>). RStudio incorpora una pesta√±a llamada "Git" que facilita la transici√≥n entre zonas de trabajo ya que contiene funcionalidades b√°sicas de Git.

![Terminal](images/terminal.png)\

![Terminal de Git](images/terminal-2.png)

![Git en RStudio](images/RStudio.JPG)

2.  Compueba que has instalado Git correctamente:

    `git --version`

    Para ver el usuario utilizado para configurar Git:

    `git config user.name`

    Para ver a qu√© cuenta de correo est√° asociado Git:

    `git config user.email`

    Para ver tanto el usuario como el correo asociado:

    `git config --global --list`

Para la resoluci√≥n de problemas durante la instalaci√≥n recomendamos mirar aqu√≠: <https://happygitwithr.com/troubleshooting.html>

3.  Genera un PAT (*Personal Access Token*) para HTTPS

    Git puede comunicarse con un servidor remoto utilizando uno de los dos protocolos: HTTPS o SSH. Nosotros utilzaremos HTTPS con *personal access token* (PAT, <https://happygitwithr.com/https-pat.html>).

```{r token, eval = F}
# install.packages("usethis")
# install.packages("gitcreds")
# library(usethis)
# library(gitcreds)
# create_github_token() # generar un token
# gitcreds_set() # acceder al Git credential store
```

üëÄ Conviene describir el prop√≥sito del token en el campo *Note*, porque se pueden tener varios PATs. No podr√°s volver a ver este token, as√≠ que no cierres ni salgas de la ventana del navegador hasta que almacenes el PAT localmente. ¬°Trata este PAT como una contrase√±a!

# Repositorios y proyectos

Un repositorio es como un "contenedor" donde desarrollar un proyecto.

Para crear un repositorio en GitHub damos a "*+ New repository*". Aqu√≠ se indica el nombre, una peque√±a descripci√≥n, y si quieres que sea p√∫blico o privado. Se recomienda iniciar el repositorio con un archivo "README" (*Initialize this repository with a README*) para recoger cualquier informaci√≥n esencial para el uso del repositorio (estructura, descripci√≥n m√°s detallada del contenido, etc.).

En RStudio, creamos un nuevo proyecto y lo conectamos al repositorio: File -\> New project -\> Version control -\> Git -\> copiar el URL del repositorio que hemos creado de GitHub (est√° en la p√°gina principal de nuestro repositorio, en "*clone or download*"). Seleccionamos el directorio donde queremos guardar el proyecto y pulsamos en "*Create project*".

Si vamos al directorio seleccionado, encontraremos la carpeta conectada a Git y GitHub que hemos creado en nuestro ordenador. Podemos copiar aqu√≠ todos los archivos que nos interesan para el proyecto (datos, im√°genes, etc).

‚ö°Para m√°s informaci√≥n sobre c√≥mo clonar el repositorio en GitHub (repositorio remoto) en nuestro ordenador (repositorio local) ver <https://happygitwithr.com/rstudio-git-github.html> para hacerlo desde RStudio y @galeano2018 para hacerlo mediante la l√≠nea de comandos.

‚ö°En caso de querer conectar un antiguo proyecto de RStudio a Git y GitHub, puedes seguir los pasos que se describen aqu√≠: <https://happygitwithr.com/existing-github-first.html>.

### üìù**Ejercicio 1.2**

1.  Crea un repositorio en GitHub y con√©ctalo a un nuevo proyecto de RStudio (esto generar√° un repositorio (carpeta) en tu ordenador en la ubicaci√≥n que hayas especificado). Incluir un archivo "*.gitignore"*

2.  Crea un nuevo script de R en el directorio de trabajo (es decir, crea un script de R y gu√°rdalo dentro del repositorio que has creado)

3.  En RStudio ve a la pesta√±a Git para ver todos los documentos que han sido identificados por Git

![Lo que esperamos que hay√°is aprendido](images/git-2.png)\

# Flujo de trabajo en Git y GitHub

Git es capaz de rastrear todos los archivos contenidos en un repositorio. Para comprender c√≥mo Git registra los cambios y c√≥mo podemos compartir dichos cambios con nuestros colaboradores es importante entender c√≥mo se estructura Git y c√≥mo se sincroniza con GitHub. Hay cuatro "zonas" de trabajo:

1.  **Directorio de trabajo (*working directory*):** es donde se est√° trabajando. Esta zona se sincroniza con los archivos locales del ordenador.

2.  **√Årea de preparaci√≥n (*staging area* o *Index*):** es la zona intermedia entre el directorio de trabajo y el repositorio local de Git. Es la zona de borradores. El usuario debe seleccionar los archivos que se van a registrar en la siguiente "captura" de Git.

3.  **Repositorio local (*local repository* o *HEAD*):** es donde se registran todos los cambios capturados por Git en tu ordenador.

4.  **Repositorio remoto (*remote repository*):** es donde se registran todos los cambios capturados por Git en la nube (GitHub).

![Graphical representation of the different working areas in Git and GitHub: working directory, staging area or Index, local repository or HEAD, and remote repository. Background image from Philip Brookes (<https://creativecommons.org/licenses/by-nc-nd/2.0/legalcode>)](images/arboles.jpg)

## ¬øC√≥mo moverse de una zona a otra?

Al principio todos los cambios realizados est√°n en amarillo porque Git no sabe que hacer con ellos. Estamos en el directorio de trabajo y puede que no nos interese guardar todos los cambios para el futuro.

Para a√±adir un cambio del directorio de trabajo al √°rea de preparaci√≥n hay que utilizar `git add`. Este comando indica a Git que se quieren incluir las actualizaciones de alg√∫n archivo en la pr√≥xima "captura" del proyecto y que Git las registre. Sin embargo, `git add` no afecta al repositorio local.

-   `git add <nombre de archivo>`: a√±ade una actualizaci√≥n de alg√∫n archivo del directorio de trabajo al √°rea de preparaci√≥n.

Para ver el estado del directorio de trabajo y del √°rea de preparaci√≥n se utiliza `git status`. Este comando permite ver qu√© archivos est√°n siendo rastreados por Git, qu√© cambios han sido a√±adidos al √°rea de preparaci√≥n (*staged*) y qu√© archivos est√°n siendo registrados por Git.

Para registrar los cambios que nos interesen hay que utilizar `git commit`. Al ejecutar `git commit` se hace una "captura" del estado del proyecto. Junto con el *commit* se a√±ade un mensaje con una peque√±a explicaci√≥n de los cambios realizados y por qu√© (p. ej. "incluyo las referencias formateadas"). Cada `git commit` tiene un SHA (*Secure Hash Algorithm*) que es un c√≥digo alfanum√©rico que identifica inequ√≠vocamente ese *commit* (p. ej. 1d21fc3c33cxxc4aeb7823400b9c7c6bc2802be1). Parece dif√≠cil de entender, pero no te preocupes, s√≥lo tienes que recordar los siete primeros d√≠gitos 1d21fc3 üòÆ(es broma). Con el SHA siempre se pueden ver los cambios que se hicieron en ese *commit* y volver a esa versi√≥n f√°cilmente.

-   `git commit -m "mensaje corto y descriptivo"`

Si se hace un `git commit` y no se escribe el mensaje se abrir√° el editor de git. El editor por defecto de Git es Vim. Para salir de Vim:

-   `ESC` y el siguiente paso depende del estado actual y de lo que quieras hacer:

    -   Si no se ha realizado ning√∫n cambio en Vim, hay que escribir `:q` y `Enter/return`

    -   Si se han realizado cambios en Vim y quieres conservarlos, hay que escribir `:wq` y `Enter/return`

    -   Si se han realizado cambios en Vim y quieres descartarlos, `:q!` y `Enter/return`

Por √∫ltimo, `git push` permite subir los cambios que hemos hecho a GitHub y quedar√°n visibles para nuestros colaboradores. B√°sicamente, `git commit` registra los cambios en el repositorio local y `git push` actualiza el repositorio remoto con los cambios y archivos asociados.

Cuando se retoma un proyecto tras horas, d√≠as o incluso meses, con `git pull` se descargan todas las actualizaciones que haya en GitHub (nuestras o de nuestros colaboradores), que se fusionar√°n (*merge*) con el √∫ltimo *commit* en nuestro repositorio local.

![Flujo de trabajo en Git y GitHub mostrando las diferentes zonas de trabajo y los comandos utilizados para la transici√≥n de una zona de trabajo a otra.](images/workflow_git_github.jpg)

### üìù**Ejercicio 1.3**

En el proyecto generado en el Ejercicio 1.2, guardad y subid los cambios realizados a GitHub (`git add` + `git commit` + `git push`)

# Propuesta de trabajo fin de curso

El trabajo se realizar√° en grupos de 2-3 personas. El objetivo es crear un proyecto rastreado por Git y alojado en GitHub donde se hayan aplicado los conocimientos aprendidos en el curso (flujo de trabajo -d√≠a 1-, trabajo en paralelo -d√≠a 2-, resoluci√≥n de problemas con Git -d√≠a 3-, etc). El proyecto consistir√° en crear un peque√±o art√≠culo de investigaci√≥n en Quarto (d√≠a 4) que contenga un objetivo, an√°lisis de unos datos (reales o inventados), un gr√°fico y un texto explicativo de los resultados.

La entrega consistir√° en una presentaci√≥n en clase (d√≠a 5) donde queremos ver el documento creado y que nos expliqu√©is las ramificaciones del proyecto, el historial de commits y otros detalles del flujo de trabajo. El d√≠a 5 habr√° tiempo para trabajar en el proyecto antes de las presentaciones.

# Algunos enlaces interesantes

**Ciencia reproducible**

-   [Ciencia reproducible: qu√©, por qu√©, c√≥mo](https://github.com/ecoinfAEET/Reproducibilidad)

**Control de versiones (Git)**

-   [Manual de referencia de Git](https://git-scm.com/docs)

-   [Software Carpentry](http://swcarpentry.github.io/git-novice/)

-   [Atlassian Bitbucket](https://www.atlassian.com/git/tutorials)

-   [Oh Shit, Git!?!](https://ohshitgit.com/)

-   [git - la gu√≠a sencilla](https://rogerdudler.github.io/git-guide/index.es.html)

-   [Pro Git](https://git-scm.com/book/es/v2)

**Integrar Git, GitHub y RStudio**

-   [Happy Git and GitHub for the useR](https://happygitwithr.com/)

**Ense√±ar y aprender con GitHub**

-   [GitHub Education para profesores e investigadores](https://docs.github.com/en/education/explore-the-benefits-of-teaching-and-learning-with-github-education/use-github-in-your-classroom-and-research/about-github-education-for-educators-and-researchers)

<details>

<summary>Session Info</summary>

```{r session-info}
Sys.time()
git2r::repository()
sessionInfo()
```

</details>
