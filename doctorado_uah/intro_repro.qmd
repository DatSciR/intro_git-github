---
title: "Manejo y visualizaci√≥n de datos en R (Parte IV - Trabajo reproducible y colaborativo)"
description: "Actividad formativa de doctorado de la Universidad de Alcal√°"
author:
    - names: "Julen Astigarraga, Ver√≥nica Cruz-Alonso, Xavi Serra-Malaquer y Paloma Ruiz-Benito"
    - affiliations: Universidad de Alcal√°, Forest Ecology and Restoration Group | Universidad Complutense de Madrid
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 3
  gfm: default
editor: visual
bibliography: references.bib
---

# Potencialidad de R m√°s haya de gesti√≥n y visualizaci√≥n

**¬øPara qu√© utiliz√°is R en vuestro d√≠a a d√≠a?**

-   Ejemplos de qu√© es una funci√≥n y programaci√≥n funcional

**¬øPara qu√© cre√©is que se puede utilizar? ¬øO para qu√© hab√©is visto/o√≠do que se utilice?**

-   Ejemplos de redacci√≥n de papers

**¬øPara qu√© os gustar√≠a que se utilizar√°?**

-   Ejemplos de p√°ginas web, aplicaciones shiny

**¬øHac√≠a d√≥nde cre√©is que se dirigir√° el futuro de la programaci√≥n (R)?**

-   Ejemplos de inteligencia artificial

-   Constante dinamismo de los lenguajes de programaci√≥n

**¬øQu√© tienen en com√∫n todos estos ejemplos que comentamos?**

-   Colaboraci√≥n

-   La reproducibilidad como pilar del m√©todo cient√≠fico

-   *Big data*

    -   Quarto (<https://quarto.org/>)

    -   Git (<https://git-scm.com/>)

    -   GitHub (<https://github.com/>)

**Problemas comunes en nuestro d√≠a a d√≠a**

-   Sobreescritura de un archivo

-   Versiones finales infinitas

!["FINAL.doc"](images/FINALdoc.png)\

-   Trabajo por error en una versi√≥n que no era la final

-   Creaci√≥n de copias "en conflicto" cuando dos personas trabajan a la vez

-   Ediciones sin control de cambios

![Ediciones sin control de cambios](images/tracker.png)\

# Quarto

Quarto (<https://quarto.org/>) es un sistema de publicaci√≥n cient√≠fica y t√©cnica de c√≥digo abierto construido sobre Pandoc. Convierte los formatos de texto plano o los formatos mixtos (p. ej. `.qmd`, `.Rmd`, `.md`, `.ipynb`) en informes est√°ticos PDF, word, HTML, etc. Puede entrelazar texto narrativo y c√≥digo para producir resultados con un formato elegante en forma de documentos, p√°ginas web, entradas de blog, libros, etc.

Utiliza programaci√≥n literaria, un paradigma de programaci√≥n creado por Donald E. Knuth que consiste en escribir la l√≥gica del programa en un lenguaje humano (p. ej. ingl√©s, castellano) con fragmentos de c√≥digo e instrucciones.

![Figura de [jthomasmock.github.io/quarto-2hr-webinar](https://jthomasmock.github.io/quarto-2hr-webinar/)](images/qmd-universe.png){alt="Figura de jthomasmock.github.io/quarto-2hr-webinar"}

Algunas de las razones por las que es recomendable utilizar Quarto son la reproducibilidad, el aumento de la eficiencia de trabajo (a medio-largo plazo), centrarse en el texto sin perder tiempo en el dise√±o y la producci√≥n de documentos de alta calidad.

La diferencia principal de Quarto respecto a R Markdown es que se ha generado para la colaboraci√≥n de m√°s de una comunidad (es decir, no solo usuarios de R o Python) y utiliza una sintaxis y formato compartido entre distintos lenguajes. Adem√°s, a medida que se a√±ad√≠an m√°s capacidades a R Markdown a trav√©s de paquetes externos de R, la sintaxis para las tareas b√°sicas se volv√≠a incoherente.

![Diagrama de funcionamiento de Quarto. Figura de [jthomasmock.github.io/quarto-2hr-webinar](https://jthomasmock.github.io/quarto-2hr-webinar/)](images/knitr-diagram-qmd.png)

La extensi√≥n de Quarto es `.qmd` y utiliza filtros Lua que es el lenguaje de extensi√≥n de Pandoc (<https://quarto.org/docs/extensions/lua.html>). Para ello, Quarto utiliza un *engine* como [`knitr`](https://yihui.org/knitr/) (paquete para generaci√≥n de informes din√°micos en R) para ejecutar el c√≥digo y generar una salida temporal `.md`. El archivo `.md` se procesa mediante [Pandoc](https://pandoc.org/) (conversor de documentos) y los filtros Lua de Quarto + Bootstrap CSS para HTML o LaTeX para PDF.

## Fundamentos b√°sicos de Quarto

Para crear un archivo Quarto: *File -\> New File -\> Quarto document*. Debemos cambiar el modelo mental: ahora tendremos un documento fuente de texto plano y a partir de dicho documento generamos un documento renderizado. Estos archivos tienen 3 componentes principales: (i) metadatos, (ii) texto, (iii) c√≥digo

-   Metadatos: se escriben entre `` `---` `` al comienzo del archivo. Utiliza la sintaxis de [YAML](https://en.wikipedia.org/wiki/YAML) (Yet Another Markup Language). Se utiliza para evitar teclear manualmente todas las opciones que pueden afectar al c√≥digo, al contenido y al proceso de renderizado cada vez que renderizamos el archivo. ¬°La sangr√≠a es importante!

-   Texto: sintaxis Markdown. Markdown es un formato de texto plano que est√° dise√±ado para ser f√°cil de escribir y, a√∫n m√°s importante, f√°cil de leer.

-   C√≥digo (2 tipos):

    -   Code chunk (bloque de c√≥digo): se escribe ```` ```{r} codigo aqui``` ````; entre corchetes se indica el lenguaje. Se puede escribir manualmente, utilizar el atajo `Ctrl + Alt + I` (OS X: `Cmd + Option + I`), utilizar el comando `Insert Code Chunk` en la barra de herramientas del editor o utilizar la paleta de comandos `Ctrl + Shift + P` (OS X `Cmd + Shift + P`).

    -   Inline (en l√≠nea): se escribe `lenguaje codigo aqui`

Para compilar un archivo, se ejecuta el bot√≥n de `Render` en RStudio (atajo: `Ctrl + Shift + K`; OS X `Cmd + Shift + K`), que llama a Quarto render en un trabajo de fondo. Esto evita que el renderizado abarrote la consola de R, y as√≠ es f√°cil de detener.

üëÄ Con el editor visual de RStudio puedes ves en tiempo real c√≥mo es la conversi√≥n a word, HTML...

Opciones de ejecuci√≥n: <https://quarto.org/docs/computations/execution-options.html>

-   Estructura `key: value`

-   `#|` sintaxis *(hash pipe)* (elige tu propio editor y lenguaje preferido)

-   Tabulaci√≥n enriquecida

-   Baterias incluidas

-   Mejores caracter√≠sticas y m√°s mejoras en el futuro

Son compatibles con muchos lenguajes de programaci√≥n:

```{r reticulate}
#| echo: false
#| eval: true
#| warning: false

library(knitr)

names(knitr::knit_engines$get())

library(reticulate) # for python

```

```{python example-phyton}

x = "R mola!"

print(x.split(" "))

```

```{r example-ggplot}

library(ggplot2)
names(cars)

ggplot(cars, aes(speed, dist)) +
  geom_point() +
  geom_smooth()

```

Para buscar ayuda: *Help -\> Markdown Quick Reference* (italics, bold, headers, lists, links, images, R codes, tables, page break, superscripts...)

Formato: **negrita**, *cursiva*, sub√≠ndice~1~, super√≠ndice^2^, codes, [hyperv√≠nculo](https://bookdown.org/yihui/rmarkdown/markdown-syntax.html), notas al pie[^1]

[^1]: hello world

T√≠tulos: \# primer nivel; \## segundo nivel...

Listas y sublistas: \*, -, +

Citas:

> "Quarto es maravilloso"
>
> --- Julen Astigarraga

F√≥rmulas:

$f(os) = {esta \choose gustando} esto^{?} (1-p)^{n-k}$

Comentarios:

<!--# esto es un comentario (atajo: Ctrl + Shift + C; OS X Cmd + Shift + C)-->

Tablas:

| Col1 | Col2 | Col3 |
|------|------|------|
|      |      |      |
|      |      |      |
|      |      |      |

: Esto es el pie de tabla

Figuras:

![Esto es el pie de figura](images/rmarkdown.png)

Videos:

{{< video https://www.youtube.com/embed/s3JldKoA0zw >}}

## Renderizaci√≥n

Existen tres formas para renderizar un documento en Quarto:

1.  Dentro de RStudio puedes seguir usando el bot√≥n de *Render* (antes *knit*, pero ahora llamado *Render* por consistencia)

2.  En el shell mediante quarto render: ü§ì

`quarto render archivo.qmd` (por defecto a HTML)

`quarto render archivo.qmd --to pdf`

`quarto render archivo.qmd --to docx`

`quarto --help`

Sobre la importancia del YAML:

`quarto render archivo.qmd --to html`

`quarto render archivo.qmd --to html -M code-fold:true`

3.  En la consola de R mediante el paquete `quarto`

`library(quarto)`

`quarto_render("archivo.qmd")`

`quarto_render("archivo.qmd", output_format = "pdf")`

### üìù**Ejercicio 1**

Genera un documento Quarto que est√© compuesto por al menos metadatos, c√≥digo y texto y renderizalo a HTML

# [Qu√© es Git](https://git-scm.com/)

Git es un sistema avanzado de control de versiones (como el "control de cambios" de Microsoft Word) distribuido [@blischak2016; @ram2013]. Git permite "rastrear" el progreso de un proyecto a lo largo del tiempo ya que hace "capturas" del mismo a medida que evoluciona y los cambios se van registrando. Esto permite ver qu√© cambios se hicieron, qui√©n los hizo y por qu√©, e incluso volver a versiones anteriores. Adem√°s, Git facilita el trabajo en paralelo de varios participantes. Mientras que en otros sistemas de control de versiones (p. ej. Subversion (SVN, <https://subversion.apache.org/>) o Concurrent Versions System (CVS, <http://cvs.nongnu.org/>)) hay un servidor central y cualquier cambio hecho por un usuario se sincroniza con este servidor y de ah√≠ con el resto de usuarios, Git es un control de versiones distribuido que permite a todos los usuarios trabajar en el proyecto paralelamente e ir haciendo "capturas" del trabajo de cada uno para luego unirlos. Otras alternativas de control de versiones distribuido comparables a Git son Mercurial (<https://www.mercurial-scm.org/>) o Bazaar (<https://bazaar.canonical.com/>), pero Git es con diferencia el m√°s utilizado.

Git surge en 2005, tras la ruptura de la relaci√≥n entre la comunidad que estaba desarrollando Linux y la empresa comercial que desarrollaba BitKeeper (DVCS). En ese momento BitKeeper dej√≥ de ser gratuita y esto llev√≥ a la comunidad de desarrolladores de Linux (y en particular a Linus Torvalds, el creador de Linux) a desarrollar su propia herramienta para el control de versiones bas√°ndose en su experiencia al utilizar BitKeeper. Algunos de los objetivos del nuevo sistema eran velocidad, dise√±o sencillo, gran soporte para el desarrollo no lineal (ramas), sistema distribuido y capacidad para manejar grandes bases de datos. Por tanto, el prop√≥sito original de Git era ayudar a grupos de desarrolladores inform√°ticos a trabajar en colaboraci√≥n en grandes proyectos de software. En este sentido, veremos que hay m√∫ltiples soluciones para un mismo problema y que la curva de aprendizaje para no desarrolladores puede ser pronunciada.

![Ejemplo de un proyecto rastreado por Git destacando informaci√≥n importante](images/git.jpg)

# [Qu√© es GitHub](https://github.com/)

GitHub es un servidor de alojamiento en l√≠nea o repositorio remoto para albergar proyectos basados en Git que permite la colaboraci√≥n entre diferentes usuarios o con uno mismo [@galeano2018; @perez-riverol2016]. Un repositorio es un directorio donde desarrollar un proyecto que contiene todos los archivos necesarios para el mismo. Aunque existen distintos repositorios remotos (p. ej. GitLab, <https://gitlab.com/>, o Bitbucket, <https://bitbucket.org/>) con funcionalidad similar, GitHub es hoy en d√≠a el m√°s utilizado. GitHub registra el desarrollo de los proyectos de manera remota, permite compartir proyectos entre distintos usuarios y proporciona la seguridad de la nube entre otras funciones. Cuando se trabaja en proyectos colaborativos, la base de la interacci√≥n entre Git y GitHub es que todos los colaboradores de un proyecto est√°n de acuerdo en que GitHub contiene la copia principal del proyecto, es decir, GitHub contiene la copia centralizada del control de versiones distribuido o descentralizado.

![P√°gina inicial de GitHub](images/github_pag_ini.JPG)

![Perfil de GitHub](images/github_perfil.JPG)

![Interacci√≥n entre Git y GitHub. Git, al ser un control de versiones distribuido, permite que todos los usuarios trabajen paralelamente sin interferir en el trabajo de los dem√°s. Luego cada usuario sincroniza su trabajo con la copia principal del proyecto ubicado en GitHub](images/conexiones.jpg)

## Instalaci√≥n de Git

En este punto es necesario que tengas instalada la versi√≥n m√°s reciente de R (<https://cloud.r-project.org/>), RStudio (<https://www.rstudio.com/products/rstudio/download/>), Git (<https://happygitwithr.com/install-git.html>) y una cuenta en GitHub (<https://github.com/>) creada.

### üìù**Ejercicio 2**

> En el *shell*, pres√©ntate a Git ([Chapter 7: Git-Intro](https://happygitwithr.com/hello-git.html))

`r emo::ji("voltage")` ¬øQu√© es el *shell*? El *shell* (o terminal) es un programa en tu ordenador cuyo trabajo es ejecutar otros programas (ver <https://happygitwithr.com/shell.html#shell>). Tambi√©n veremos c√≥mo hacerlo a trav√©s de un cliente como RStudio (<https://www.rstudio.com/>).

![Terminal](images/terminal.png)\

![Terminal de Git](images/terminal-2.png)

![A trav√©s de RStudio](images/RStudio.JPG)

*Tools* -\> *Shell*

`git config --global user.name 'Nombre Apellido'`

`git config --global user.email 'nombre@ejemplo.com'`

Compueba que has instalado Git correctamente:

`git --version`

Para ver el usuario utilizado para configurar Git:

`git config user.name`

Para ver a qu√© cuenta de correo est√° asociado Git:

`git config user.email`

Para ver tanto el usuario como el correo asociado:

`git config --global --list`

```{r config}
#| eval: false
# install.packages("usethis")
# library(usethis)
# use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")
```

## Repositorios y proyectos

Un repositorio es como un "contenedor" donde desarrollar un proyecto.

Para crear un repositorio en GitHub damos a "*+ New repository*". Aqu√≠ se indica el nombre, una peque√±a descripci√≥n, y si quieres que sea p√∫blico o privado. Se recomienda iniciar el repositorio con un archivo "README" (*Initialize this repository with a README*) para recoger cualquier informaci√≥n esencial para el uso del repositorio (estructura, descripci√≥n m√°s detallada del contenido, etc.).

![Repositorio en GitHub destacando algunas pesta√±as importantes](images/github_repositorio.JPG){alt="Repositorio en GitHub destacando algunas pesta√±as importantes"}

![Repositorio en GitHub destacando informaci√≥n importante](images/github_repositorio2.JPG){alt="Repositorio en GitHub destacando informaci√≥n importante"}

En RStudio, creamos un nuevo proyecto y lo conectamos al repositorio: File -\> New project -\> Version control -\> Git -\> copiar el URL del repositorio que hemos creado de GitHub (est√° en la p√°gina principal de nuestro repositorio, en "*clone or download*"). Seleccionamos el directorio donde queremos guardar el proyecto y pulsamos en "*Create project*".

Si vamos al directorio seleccionado, encontraremos la carpeta conectada a Git y GitHub que hemos creado en nuestro ordenador. Podemos copiar aqu√≠ todos los archivos que nos interesan para el proyecto (datos, im√°genes, etc).

### **Ejercicio 3**

1.  Crea un repositorio en GitHub y con√©ctalo a un nuevo proyecto de RStudio (esto generar√° un repositorio (carpeta) en tu ordenador en la ubicaci√≥n que hayas especificado).

2.  Crea un nuevo script de R en el directorio de trabajo (es decir, crea un script de R y gu√°rdalo dentro del repositorio que has creado)

3.  En RStudio ve a la pesta√±a Git para ver todos los documentos que han sido identificados por Git

![Lo que esperamos que hay√°is aprendido](images/git-2.png)\

## Flujo de trabajo en Git y GitHub

Git es capaz de rastrear todos los archivos contenidos en un repositorio. Para comprender c√≥mo Git registra los cambios y c√≥mo podemos compartir dichos cambios con nuestros colaboradores es importante entender c√≥mo se estructura Git y c√≥mo se sincroniza con GitHub. Hay cuatro "zonas" de trabajo:

1.  **Directorio de trabajo (*working directory*):** es donde se est√° trabajando. Esta zona se sincroniza con los archivos locales del ordenador.

2.  **√Årea de preparaci√≥n (*staging area* o *Index*):** es la zona intermedia entre el directorio de trabajo y el repositorio local de Git. Es la zona de borradores. El usuario debe seleccionar los archivos que se van a registrar en la siguiente "captura" de Git.

3.  **Repositorio local (*local repository* o *HEAD*):** es donde se registran todos los cambios capturados por Git en tu ordenador.

4.  **Repositorio remoto (*remote repository*):** es donde se registran todos los cambios capturados por Git en la nube (GitHub).

![Graphical representation of the different working areas in Git and GitHub: working directory, staging area or Index, local repository or HEAD, and remote repository. Background image from Philip Brookes (<https://creativecommons.org/licenses/by-nc-nd/2.0/legalcode>)](images/arboles.jpg)

### ¬øC√≥mo moverse de una zona a otra?

## ¬øC√≥mo moverse de una zona a otra?

Al principio todos los cambios realizados est√°n en amarillo porque Git no sabe que hacer con ellos. Estamos en el directorio de trabajo y puede que no nos interese guardar todos los cambios para el futuro.

Para a√±adir un cambio del directorio de trabajo al √°rea de preparaci√≥n hay que utilizar `git add`. Este comando indica a Git que se quieren incluir las actualizaciones de alg√∫n archivo en la pr√≥xima "captura" del proyecto y que Git las registre. Sin embargo, `git add` no afecta al repositorio local.

-   `git add <nombre de archivo>`: a√±ade una actualizaci√≥n de alg√∫n archivo del directorio de trabajo al √°rea de preparaci√≥n.

‚ö°Usar `git commit` es para el proyecto como usar anclajes cuando estamos escalando una pared de roca. Desarrollar un script sin commits es como escalar sin asegurarse: puedes avanzar mucho m√°s r√°pido a corto plazo, pero a largo plazo las probabilidades de fallo catastr√≥fico son altas. Por otro lado, hacer muchos commits va a ralentizar tu progreso. Lo mejor: usar m√°s commits cuando est√°s en un territorio incierto o peligroso.

![Lineas de trabajo (cuerdas) aseguradas con varios commits (anclajes)](images/climbing.png)

Para ver el estado del directorio de trabajo y del √°rea de preparaci√≥n se utiliza `git status`. Este comando permite ver qu√© archivos est√°n siendo rastreados por Git, qu√© cambios han sido a√±adidos al √°rea de preparaci√≥n (*staged*) y qu√© archivos est√°n siendo registrados por Git.

Para registrar los cambios que nos interesen hay que utilizar `git commit`. Al ejecutar `git commit` se hace una "captura" del estado del proyecto. Junto con el *commit* se a√±ade un mensaje con una peque√±a explicaci√≥n de los cambios realizados y por qu√© (p. ej. "incluyo las referencias formateadas"). Cada `git commit` tiene un SHA (*Secure Hash Algorithm*) que es un c√≥digo alfanum√©rico que identifica inequ√≠vocamente ese *commit* (p. ej. 1d21fc3c33cxxc4aeb7823400b9c7c6bc2802be1). Parece dif√≠cil de entender, pero no te preocupes, s√≥lo tienes que recordar los siete primeros d√≠gitos 1d21fc3 üòÆ(es broma). Con el SHA siempre se pueden ver los cambios que se hicieron en ese *commit* y volver a esa versi√≥n f√°cilmente.

-   `git commit -m "mensaje corto y descriptivo"`

Por √∫ltimo, `git push` permite subir los cambios que hemos hecho a GitHub y quedar√°n visibles para nuestros colaboradores. B√°sicamente, `git commit` registra los cambios en el repositorio local y `git push` actualiza el repositorio remoto con los cambios y archivos asociados.

Cuando se retoma un proyecto tras horas, d√≠as o incluso meses, con `git pull` se descargan todas las actualizaciones que haya en GitHub (nuestras o de nuestros colaboradores), que se fusionar√°n (*merge*) con el √∫ltimo *commit* en nuestro repositorio local.

![Flujo de trabajo en Git y GitHub mostrando las diferentes zonas de trabajo y los comandos utilizados para la transici√≥n de una zona de trabajo a otra.](images/workflow_git_github.jpg)

### **Ejercicio 4**

En el proyecto generado en el Ejercicio 3, guardad y subid los cambios realizados a GitHub (`git add` + `git commit` + `git push`)

## ¬øC√≥mo se puede trabajar paralelamente? (m√°s avanzado)

![Proceso de creaci√≥n de la rama *PPP* y la rama *monchi*](images/ramas.png){alt="Proceso de creaci√≥n de la rama PPP y la rama monchi"}

![Proceso de creaci√≥n y uni√≥n de ramas. Ejemplo de uni√≥n (*merge*) de la rama *monchi* a la rama *main*](images/merge.jpg){alt="Proceso de creaci√≥n y uni√≥n de ramas. Ejemplo de uni√≥n (merge) de la rama monchi a la rama main"}

# Algunos enlaces interasantes

**Informaci√≥n m√°s detallada de los temas tratados en esta sesi√≥n**

-   [Introducci√≥n a Git y GitHub](https://github.com/Julenasti/intro_git-github)

**Quarto**

-   [Quarto](https://quarto.org)

-   [Quarto workshop](https://www.youtube.com/watch?v=yvi5uXQMvu4)

-   [What is Quarto? RStudio rolls out next-generation R Markdown](https://www.infoworld.com/article/3666743/what-is-quarto-rstudio-quietly-rolls-out-next-generation-r-markdown.html)

-   [How to create Word docs from R or Python with Quarto](https://www.infoworld.com/article/3671668/how-to-create-word-docs-from-r-or-python-with-quarto.html)

-   [Install TinyTeX to create PDF reports](https://yihui.org/tinytex/)

-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)

**Ciencia reproducible**

-   [Ciencia reproducible: qu√©, por qu√©, c√≥mo](https://github.com/ecoinfAEET/Reproducibilidad)

**Control de versiones (Git)**

-   [Manual de referencia de Git](https://git-scm.com/docs)

-   [Software Carpentry](http://swcarpentry.github.io/git-novice/)

-   [Atlassian Bitbucket](https://www.atlassian.com/git/tutorials)

-   [Oh Shit, Git!?!](https://ohshitgit.com/)

-   [git - la gu√≠a sencilla](https://rogerdudler.github.io/git-guide/index.es.html)

-   [Pro Git](https://git-scm.com/book/es/v2)

**Integrar Git, GitHub y RStudio**

-   [Happy Git and GitHub for the useR](https://happygitwithr.com/){.uri}

**Ense√±ar y aprender con GitHub**

-   [GitHub Education para profesores e investigadores](https://docs.github.com/en/education/explore-the-benefits-of-teaching-and-learning-with-github-education/use-github-in-your-classroom-and-research/about-github-education-for-educators-and-researchers)

![Fire emergency](images/in_case_of_fire.png)\

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session-info}
Sys.time()
git2r::repository()
sessionInfo()
```

</details>
